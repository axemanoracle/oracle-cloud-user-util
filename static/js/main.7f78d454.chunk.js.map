{"version":3,"sources":["html-utils.js","UtilContainer.js","index.js"],"names":["sanitize","input","createDOMPurify","window","UtilContainer","props","useState","result","setResult","getRequest","params","path","reqMethod","body","headers","Headers","append","btoa","username","password","Request","baseUrl","method","credentials","className","id","placeholder","value","type","name","onClick","event","payload","document","getElementById","crendentialLines","split","forEach","line","splitVar","push","oraUsername","oraPassword","oraCreds","readFormData","request","fetch","then","response","ok","json","Error","jsonData","users","Resources","usernames","map","user","userCredsMap","Map","set","updateList","filter","includes","userName","operations","element","bulkId","data","schemas","get","patchPayload","Operations","patchReq","JSON","stringify","patchResponse","resultText","App","ReactDOM","render"],"mappings":"sOAOeA,MALf,SAAkBC,GAEd,OADkBC,IAAgBC,QACjBH,SAASC,ICmIfG,MApIf,SAAuBC,GAAQ,IAAD,EAEEC,mBAAS,IAFX,mBAEnBC,EAFmB,KAEXC,EAFW,KA8BpBC,EAAa,SAACC,EAAQC,EAAMC,EAAWC,GACzC,IAAMC,EAAU,IAAIC,QAYpB,OAXAD,EAAQE,OAAO,SAAU,oBACzBF,EAAQE,OAAO,eAAgB,oBAC/BF,EAAQE,OAAO,gBAAiB,SAAWb,OAAOc,KAAKP,EAAOQ,SAAW,IAAMR,EAAOS,WAE1E,IAAIC,QAAQV,EAAOW,QAAUV,EAAM,CAC3CW,OAAQV,EACRE,QAASA,EACTS,YAAa,cACbV,KAAMA,KAiEd,OACI,6BACI,yBAAKW,UAAU,aACX,uEAEA,yCACA,2BAAOC,GAAG,UAAUC,YAAY,2CAA2CC,MAAM,4DAEjF,yCACA,2BAAOF,GAAG,WAAWC,YAAY,6BAA6BC,MAAM,mBAEpE,yCACA,2BAAOC,KAAK,WAAWH,GAAG,WAAWC,YAAY,kCAAkCC,MAAM,gBAEzF,wCACA,8BAAUF,GAAG,YAAYC,YAAY,wCAErC,6BACI,4BAAQG,KAAK,SAASC,QA7EnB,SAACC,GAGhB,IAAMrB,EA7CW,WAEjB,IAAMsB,EAAUhC,EAASiC,SAASC,eAAe,aAAaP,OACxDN,EAAUrB,EAASiC,SAASC,eAAe,WAAWP,OACtDT,EAAWlB,EAASiC,SAASC,eAAe,YAAYP,OACxDR,EAAWnB,EAASiC,SAASC,eAAe,YAAYP,OAGxDQ,EAAmBH,EAAQI,MAAM,MACjCb,EAAc,GAcpB,OAbAY,EAAiBE,SAAQ,SAAAC,GACrB,IAAMC,EAAWD,EAAKF,MAAM,KAC5Bb,EAAYiB,KAAK,CAAEC,YAAaF,EAAS,GAAIG,YAAaH,EAAS,QAIxD,CACXlB,QAASA,EACTH,SAAUA,EACVC,SAAUA,EACVwB,SAAUpB,GAyBCqB,GACTC,EAAUpC,EAAWC,EAAQ,yBAA0B,OAG7DoC,MAAMD,GACDE,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,uBAGvBJ,MAAK,SAACK,GAEH,IAAMC,EAAQD,EAASE,UAGjBC,EAAY7C,EAAOiC,SAASa,KAAI,SAAAC,GAAI,OAAIA,EAAKhB,eAC7CiB,EAAe,IAAIC,IACzBjD,EAAOiC,SAASN,SAAQ,SAAAoB,GAAI,OAAIC,EAAaE,IAAIH,EAAKhB,YAAagB,EAAKf,gBAExE,IAAMmB,EAAaR,EAAMS,QAAO,SAAAL,GAC5B,OAAOF,EAAUQ,SAASN,EAAKO,aAI7BC,EAAa,GACnBJ,EAAWxB,SAAQ,SAAA6B,GACfD,EAAWzB,KAAK,CACZlB,OAAQ,QACRX,KAAM,UAAYuD,EAAQzC,GAC1B0C,OAAQ,oBACRC,KAAM,CACFC,QAAS,CAAC,kCACVlD,SAAUuC,EAAaY,IAAIJ,EAAQF,gBAK/C,IAAMO,EAAe,CAAEC,WAAYP,GAC7BQ,EAAWhE,EAAWC,EAAQ,wBAAyB,OAAQgE,KAAKC,UAAUJ,IAEpFzB,MAAM2B,GACD1B,MAAK,SAAA6B,GACF,GAAIA,EAAc3B,GACd,OAAO2B,EAAc1B,OAErB,MAAM,IAAIC,MAAM,0CAGvBJ,MAAK,SAAA8B,GACFrE,EAAUkE,KAAKC,UAAUE,YAuB7B,YAIR,yBAAKpD,GAAK,iBAAiBD,UAAU,WAArC,IAAiDjB,EAAjD,OC7HZ,SAASuE,EAAIzE,GAEX,OACE,6BACE,kBAAC,EAAD,OAMN0E,IAASC,OAAO,kBAACF,EAAD,MAAS7C,SAASC,eAAe,U","file":"static/js/main.7f78d454.chunk.js","sourcesContent":["import createDOMPurify from \"dompurify\";\r\n\r\nfunction sanitize(input) {\r\n    const DOMPurify = createDOMPurify(window);\r\n    return DOMPurify.sanitize(input);\r\n}\r\n\r\nexport default sanitize;","import React, { useState } from 'react'\r\nimport sanitize from './html-utils'\r\n\r\nfunction UtilContainer(props) {\r\n\r\n    const [result, setResult] = useState(\"\");\r\n\r\n    const readFormData = () => {\r\n        // Sanitize to prevent XSS attacks\r\n        const payload = sanitize(document.getElementById(\"usersList\").value);\r\n        const baseUrl = sanitize(document.getElementById(\"baseUrl\").value);\r\n        const username = sanitize(document.getElementById(\"username\").value);\r\n        const password = sanitize(document.getElementById(\"password\").value);\r\n\r\n        // Tokenize payload to extract username and passwords\r\n        const crendentialLines = payload.split(\"\\n\");\r\n        const credentials = [];\r\n        crendentialLines.forEach(line => {\r\n            const splitVar = line.split(\"/\");\r\n            credentials.push({ oraUsername: splitVar[0], oraPassword: splitVar[1] });\r\n        })\r\n\r\n        // Generate parameters object\r\n        const params = {\r\n            baseUrl: baseUrl,\r\n            username: username,\r\n            password: password,\r\n            oraCreds: credentials\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    const getRequest = (params, path, reqMethod, body) => {\r\n        const headers = new Headers();\r\n        headers.append('Accept', 'application/json');\r\n        headers.append('Content-Type', 'application/json');\r\n        headers.append('Authorization', 'Basic ' + window.btoa(params.username + ':' + params.password));\r\n\r\n        const req = new Request(params.baseUrl + path, {\r\n            method: reqMethod,\r\n            headers: headers,\r\n            credentials: \"same-origin\",\r\n            body: body\r\n        });\r\n\r\n        return req;\r\n    }\r\n\r\n    const onBtnClick = (event) => {\r\n\r\n        // Read form data \r\n        const params = readFormData();\r\n        const request = getRequest(params, '/hcmRestApi/scim/Users', 'GET');\r\n\r\n        // Make  API call to get list of users \r\n        fetch(request)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error('Bad HTTP Request');\r\n                }\r\n            })\r\n            .then((jsonData) => {\r\n                // Extract user details from response body\r\n                const users = jsonData.Resources;\r\n\r\n                // Filter out user records that need password update\r\n                const usernames = params.oraCreds.map(user => user.oraUsername);\r\n                const userCredsMap = new Map();\r\n                params.oraCreds.forEach(user => userCredsMap.set(user.oraUsername, user.oraPassword));\r\n\r\n                const updateList = users.filter(user => {\r\n                    return usernames.includes(user.userName);\r\n                });\r\n\r\n                // Generate update payload \r\n                const operations = [];\r\n                updateList.forEach(element => {\r\n                    operations.push({\r\n                        method: \"PATCH\",\r\n                        path: \"/Users/\" + element.id,\r\n                        bulkId: \"restBulkUploadId1\",\r\n                        data: {\r\n                            schemas: [\"urn:scim:schemas:core:2.0:User\"],\r\n                            password: userCredsMap.get(element.userName)\r\n                        }\r\n                    });\r\n                });\r\n\r\n                const patchPayload = { Operations: operations };\r\n                const patchReq = getRequest(params, '/hcmRestApi/scim/Bulk', 'POST', JSON.stringify(patchPayload));\r\n\r\n                fetch(patchReq)\r\n                    .then(patchResponse => {\r\n                        if (patchResponse.ok) {\r\n                            return patchResponse.json();\r\n                        } else {\r\n                            throw new Error('Invalid request. Error in response.');\r\n                        }\r\n                    })\r\n                    .then(resultText => {\r\n                        setResult(JSON.stringify(resultText));\r\n                    });\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n                <h3>Bulk Update Oracle Cloud User Passwords</h3>\r\n\r\n                <div>Base URL</div>\r\n                <input id=\"baseUrl\" placeholder=\"e.g. https://eslj.fa.ocs.oraclecloud.com\" value=\"https://fa-eomj-dev1-saasfaprod1.fa.ocs.oraclecloud.com\" />\r\n\r\n                <div>Username</div>\r\n                <input id=\"username\" placeholder=\"Enter application username\" value=\"technical.user\" />\r\n\r\n                <div>Password</div>\r\n                <input type=\"password\" id=\"password\" placeholder=\"Enter application user password\" value=\"Welcome@123\" />\r\n\r\n                <div>Payload</div>\r\n                <textarea id=\"usersList\" placeholder=\"Enter list of username/new_password\"/>\r\n\r\n                <div>\r\n                    <button name=\"submit\" onClick={onBtnClick}>Submit</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div id = \"updateResponse\" className=\"console\"> {result} </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UtilContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport UtilContainer from './UtilContainer';\n\nfunction App(props) {\n\n  return (\n    <div>\n      <UtilContainer />\n    </div>\n  );\n\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}